/// <reference types="node" />
export declare class Keypair {
    _pubkeys: string;
    _signPub: Uint8Array;
    _encPub: Uint8Array;
    _signPriv: Uint8Array;
    _encPriv: Uint8Array;
    /**
     * keypair constructor (you probably want one of the static functions above)
     * @param {object} opt
     * @param {string} opt.pubkeys - the keypair identity string
     * @param {Buffer} [opt.signPriv] - private signature key
     * @param {Buffer} [opt.encPriv] - private encryption key
     */
    constructor(opt: {
        pubkeys: string;
        signPriv: Uint8Array;
        encPriv: Uint8Array;
        signPub: Uint8Array;
        encPub: Uint8Array;
    });
    /**
     * derive the pairs from a 32 byte seed buffer
     * @param {Buffer} seed - the seed buffer
     */
    static newFromSeed(seed: Buffer): Promise<{}>;
    /**
     * get the keypair identifier string
     * @return {string}
     */
    getId(): string;
    /**
     * sign some arbitrary data with the signing private key
     * @param {Buffer} data - the data to sign
     */
    sign(data: Buffer): Promise<{}>;
    /**
     * verify data that was signed with our private signing key
     * @param {Buffer} signature
     * @param {Buffer} data
     */
    verify(signature: Buffer, data: Buffer): Promise<{}>;
    /**
     * encrypt arbitrary data to be readale by potentially multiple recipients
     * @param {array<string>} recipientIds - multiple recipient identifier strings
     * @param {Buffer} data - the data to encrypt
     * @return {Buffer}
     */
    encrypt(recipientIds: Array<string>, data: Buffer, adata: Buffer): Promise<{}>;
    /**
     * attempt to decrypt the cipher buffer (assuming it was targeting us)
     * @param {string} sourceId - identifier string of who encrypted this data
     * @param {Buffer} cipher - the encrypted data
     * @return {Buffer} - the decrypted data
     */
    decrypt(sId: string, cipher: Buffer, adata: Buffer): Promise<{}>;
    /**
     * generate an encrypted persistence bundle
     * @param {string} passphrase - the encryption passphrase
     * @param {string} hint - additional info / description for the bundle
     */
    getBundle(passphrase: string, hint: string): Promise<{}>;
    /**
     * initialize the pairs from an encrypted persistence bundle
     * @param {object} bundle - persistence info
     * @param {string} passphrase - decryption passphrase
     */
    static fromBundle(bundle: any, passphrase: string): Promise<{}>;
}
