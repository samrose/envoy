/// <reference types="node" />
export declare function randomBytes(count: Number): Promise<Buffer>;
/**
 * using base64url encoding (https://tools.ietf.org/html/rfc4648#section-5)
 * Generate an identity string with a pair of public keys
 * @param {Buffer} signPub - singing public key
 * @param {Buffer} encPub - encryption public key
 * @return {string} - the base64url encoded identity (with checksum)
 */
export declare function encodeId(signPub: Buffer, encPub: Buffer): Promise<string>;
/**
 * using base64url encoding (https://tools.ietf.org/html/rfc4648#section-5)
 * break an identity string up into a pair of public keys
 * @param {string} id - the base64url encoded identity string
 * @return {object} - { signPub: Buffer, encPub: Buffer }
 */
export declare function decodeId(id: string): Promise<{}>;
/**
 * verify a signature given the original data, and the signer's identity string
 * @param {Buffer} signature - the binary signature
 * @param {Buffer} data - the binary data to verify
 * @param {string} signerId - the signer's public identity string
 */
export declare function verify(signature: Buffer, data: Buffer, signerId: string): Promise<{}>;
/**
 * simplify the api for generating a password hash with our set parameters
 * @param {Buffer} pass - the password buffer to hash
 * @param {Buffer} [salt] - if specified, hash with this salt (otherwise random)
 * @return {object} - { salt: Buffer, hash: Buffer }
 */
export declare function pwHash(pass: Buffer, salt?: Buffer): Promise<{}>;
/**
 * Helper for encrypting a buffer with a pwhash-ed passphrase
 * @param {Buffer} data
 * @param {string} passphrase
 * @return {Buffer} - the encrypted data
 */
export declare function pwEnc(data: Buffer, passphrase: Buffer, adata: Buffer): Promise<{}>;
/**
 * Helper for decrypting a buffer with a pwhash-ed passphrase
 * @param {Buffer} data
 * @param {string} passphrase
 * @return {Buffer} - the decrypted data
 */
export declare function pwDec(data: Buffer, passphrase: Buffer, adata: Buffer): Promise<Buffer>;
/**
 * Convert a buffer to a base64 encoded string.
 * Uses the URL safe no padding option
 *
 * @param      {Buffer}  buffer  ThefromBase64 data to encode
 * @return     {string}  base64 encoded string
 */
export declare function toBase64(buffer: Buffer): Promise<string>;
/**
 * Convert a base64 encoded string to a buffer
 * Uses the URL safe no padding option
 *
 * @param      {string}  str  The base64 encoded string
 * @return     {Buffer}  base64 encoded string
 */
export declare function fromBase64(str: String): Promise<Buffer>;
