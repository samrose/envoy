/**
 * keyManagement.js
 *
 * Deals with managing how keys generated with the salt server
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
var _a = require('./dpki-ultralite'), Keypair = _a.Keypair, randomBytes = _a.randomBytes, pwHash = _a.pwHash, fromBase64 = _a.fromBase64, toBase64 = _a.toBase64;
var saltmineUrl = '//saltmine.holohost.net';
/**
 * Make a call to the saltmine API
 *
 * @param      {string}      method  The HTTP method e.g. "POST"
 * @param      {Object}      params  Parameter to pass in the body
 * @return     {Promise}     Promise that resolves to the reponse
 */
var callSaltmine = function (method, params) {
    var body;
    if (method === 'GET') {
        body = undefined;
    }
    else {
        body = Object.keys(params).map(function (key) {
            return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);
        }).join('&');
    }
    return fetch(saltmineUrl, {
        method: method,
        // mode: 'no-cors',
        cache: 'no-cache',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded' // Do not change or CORS will come and eat you alive (it does anyway!)
        },
        body: body
    });
};
/**
 * Use the saltmine to retrieve 32 bytes of entropy
 *
 * @return     {Uint8Array}  The remote entropy.
 */
var getRemoteEntropy = function () {
    return callSaltmine('GET')
        .then(function (r) { return r.text(); })
        .then(fromBase64)
        // @ts-ignore
        .then(function (buffer) { return new Uint8Array(buffer).slice(0, 32); });
};
/**
 * Register some salt with a given email address
 *
 * @param      {string}      email   The email
 * @param      {Uint8Array}  salt    The salt
 * @return     {Promise}     If successful will resolve to the same salt again
 */
var registerSalt = function (email, salt) {
    return callSaltmine('POST', { email: email, salt: salt })
        .then(function (r) { return r.text(); })
        .then(fromBase64)
        // @ts-ignore
        .then(function (buffer) { return new Uint8Array(buffer).slice(0, 32); });
};
/**
 * Gets the registered salt.
 *
 * @param      {string}      email   The email
 * @return     {Promise}  If successful will resolve to previously registered salt
 */
var getRegisteredSalt = function (email) {
    return callSaltmine('POST', { email: email })
        .then(function (r) { return r.text(); })
        .then(fromBase64)
        // @ts-ignore
        .then(function (buffer) { return new Uint8Array(buffer).slice(0, 32); });
};
/**
 * Generate 32 bytes of entropy locally using either webcrypto (preferred, unimplemented) or libsodium
 *
 * @return     {Uint8Array}  The local entropy.
 */
var getLocalEntropy = function () { return __awaiter(_this, void 0, void 0, function () {
    var array;
    return __generator(this, function (_a) {
        if (typeof window !== 'undefined' && window.crypto) {
            array = new Uint8Array(32);
            window.crypto.getRandomValues(array);
            return [2 /*return*/, array];
        }
        else {
            console.log('Browser does not provide webcrypto. Falling back to libsodium (Warning: this may be less secure)');
            return [2 /*return*/, randomBytes(32)];
        }
        return [2 /*return*/];
    });
}); };
/**
 * XOR two Uint8 arrays together.
 * Surely there is a better way to do this? This is the best I could find
 */
var XorUint8Array = function (a, b) {
    var r = new Uint8Array(a.length);
    for (var i = 0; i < a.length; i++) {
        r[i] = a[i] ^ b[i];
    }
    return r;
};
/**
 * Full workflow for generating a new readonly key pair
 *
 * @param    {function}    remoteEntropyGenerator
 * @param    {function}    localEntropyGenerator
 * @return     {Object}  The generated keypair object
 */
var generateReadonlyKeypair = function (remoteEntropyGenerator, localEntropyGenerator) {
    if (remoteEntropyGenerator === void 0) { remoteEntropyGenerator = getRemoteEntropy; }
    if (localEntropyGenerator === void 0) { localEntropyGenerator = getLocalEntropy; }
    return __awaiter(_this, void 0, void 0, function () {
        var remoteEntropy, localEntropy, seed, keypair;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, remoteEntropyGenerator()];
                case 1:
                    remoteEntropy = _a.sent();
                    return [4 /*yield*/, localEntropyGenerator()];
                case 2:
                    localEntropy = _a.sent();
                    seed = XorUint8Array(remoteEntropy, localEntropy);
                    return [4 /*yield*/, Keypair.newFromSeed(seed)];
                case 3:
                    keypair = _a.sent();
                    return [2 /*return*/, keypair];
            }
        });
    });
};
/**
 * Full workflow for generating a new readwrite keypair given an email and password
 *
 * @param      {string}  email     The email
 * @param      {string}  password  The password
 * @param    {function}    remoteEntropyGenerator
 * @param    {function}    localEntropyGenerator
 * @param      {function} saltRegistrationCallback
 */
var generateNewReadwriteKeypair = function (email, password, remoteEntropyGenerator, localEntropyGenerator, saltRegistrationCallback) {
    if (remoteEntropyGenerator === void 0) { remoteEntropyGenerator = getRemoteEntropy; }
    if (localEntropyGenerator === void 0) { localEntropyGenerator = getLocalEntropy; }
    if (saltRegistrationCallback === void 0) { saltRegistrationCallback = registerSalt; }
    return __awaiter(_this, void 0, void 0, function () {
        var remoteEntropy, localEntropy, saltBytes, saltString, registeredSalt, e_1, hash, keypair;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, remoteEntropyGenerator()];
                case 1:
                    remoteEntropy = _a.sent();
                    return [4 /*yield*/, localEntropyGenerator()];
                case 2:
                    localEntropy = _a.sent();
                    saltBytes = XorUint8Array(remoteEntropy, localEntropy);
                    return [4 /*yield*/, toBase64(saltBytes)];
                case 3:
                    saltString = _a.sent();
                    _a.label = 4;
                case 4:
                    _a.trys.push([4, 6, , 7]);
                    return [4 /*yield*/, saltRegistrationCallback(email, saltString)];
                case 5:
                    registeredSalt = _a.sent();
                    return [3 /*break*/, 7];
                case 6:
                    e_1 = _a.sent();
                    console.error('could not register salt. Proceeding unregistered', e_1);
                    registeredSalt = saltString;
                    return [3 /*break*/, 7];
                case 7: return [4 /*yield*/, pwHash(password, registeredSalt.slice(0, 16))];
                case 8:
                    hash = (_a.sent()).hash;
                    return [4 /*yield*/, Keypair.newFromSeed(hash)];
                case 9:
                    keypair = _a.sent();
                    return [2 /*return*/, keypair];
            }
        });
    });
};
/**
 * Full workflow for restoring a keypair given a user has already registered salt for
 * the given email address
 *
 * @param      {string}  email     The email
 * @param      {string}  password  The password
 * @param      {function} getRegisteredSaltCallback
 * @return     {function}  The generated keypair object
 */
var regenerateReadwriteKeypair = function (email, password, getRegisteredSaltCallback) {
    if (getRegisteredSaltCallback === void 0) { getRegisteredSaltCallback = getRegisteredSalt; }
    return __awaiter(_this, void 0, void 0, function () {
        var registeredSalt, hash, keypair;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getRegisteredSaltCallback(email)];
                case 1:
                    registeredSalt = _a.sent();
                    return [4 /*yield*/, pwHash(password, registeredSalt.slice(0, 16))];
                case 2:
                    hash = (_a.sent()).hash;
                    return [4 /*yield*/, Keypair.newFromSeed(hash)];
                case 3:
                    keypair = _a.sent();
                    return [2 /*return*/, keypair];
            }
        });
    });
};
module.exports = {
    getRemoteEntropy: getRemoteEntropy,
    getLocalEntropy: getLocalEntropy,
    generateReadonlyKeypair: generateReadonlyKeypair,
    generateNewReadwriteKeypair: generateNewReadwriteKeypair,
    regenerateReadwriteKeypair: regenerateReadwriteKeypair
};
