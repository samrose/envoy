/**
 * keyManagement.js
 *
 * Deals with managing how keys generated with the salt server
 *
 */
declare const Keypair: any, randomBytes: any, pwHash: any, fromBase64: any, toBase64: any;
declare const saltmineUrl = "//saltmine.holohost.net";
/**
 * Make a call to the saltmine API
 *
 * @param      {string}      method  The HTTP method e.g. "POST"
 * @param      {Object}      params  Parameter to pass in the body
 * @return     {Promise}     Promise that resolves to the reponse
 */
declare const callSaltmine: (method: string, params?: any) => Promise<Response>;
/**
 * Use the saltmine to retrieve 32 bytes of entropy
 *
 * @return     {Uint8Array}  The remote entropy.
 */
declare const getRemoteEntropy: () => Promise<any>;
/**
 * Register some salt with a given email address
 *
 * @param      {string}      email   The email
 * @param      {Uint8Array}  salt    The salt
 * @return     {Promise}     If successful will resolve to the same salt again
 */
declare const registerSalt: (email: string, salt: Uint8Array) => Promise<any>;
/**
 * Gets the registered salt.
 *
 * @param      {string}      email   The email
 * @return     {Promise}  If successful will resolve to previously registered salt
 */
declare const getRegisteredSalt: (email: string) => Promise<any>;
/**
 * Generate 32 bytes of entropy locally using either webcrypto (preferred, unimplemented) or libsodium
 *
 * @return     {Uint8Array}  The local entropy.
 */
declare const getLocalEntropy: () => Promise<any>;
/**
 * XOR two Uint8 arrays together.
 * Surely there is a better way to do this? This is the best I could find
 */
declare const XorUint8Array: (a: Uint8Array, b: Uint8Array) => Uint8Array;
/**
 * Full workflow for generating a new readonly key pair
 *
 * @param    {function}    remoteEntropyGenerator
 * @param    {function}    localEntropyGenerator
 * @return     {Object}  The generated keypair object
 */
declare const generateReadonlyKeypair: (remoteEntropyGenerator?: () => Promise<any>, localEntropyGenerator?: () => Promise<any>) => Promise<any>;
/**
 * Full workflow for generating a new readwrite keypair given an email and password
 *
 * @param      {string}  email     The email
 * @param      {string}  password  The password
 * @param    {function}    remoteEntropyGenerator
 * @param    {function}    localEntropyGenerator
 * @param      {function} saltRegistrationCallback
 */
declare const generateNewReadwriteKeypair: (email: string, password: string, remoteEntropyGenerator?: () => Promise<any>, localEntropyGenerator?: () => Promise<any>, saltRegistrationCallback?: (email: string, salt: Uint8Array) => Promise<any>) => Promise<any>;
/**
 * Full workflow for restoring a keypair given a user has already registered salt for
 * the given email address
 *
 * @param      {string}  email     The email
 * @param      {string}  password  The password
 * @param      {function} getRegisteredSaltCallback
 * @return     {function}  The generated keypair object
 */
declare const regenerateReadwriteKeypair: (email: string, password: string, getRegisteredSaltCallback?: (email: string) => Promise<any>) => Promise<any>;
