export interface MakeWebClientOptionals {
    happId?: string;
    hostUrl?: string;
    hAppUrl?: string;
    dnaHash?: string;
    preCall?: PreCallFunction;
    postCall?: PostCallFunction;
    postConnect?: PostConnectFunction;
}
declare type Call = (...segments: Array<string>) => (params: any) => Promise<any>;
declare type CallZome = (instanceId: string, zome: string, func: string) => (params: any) => Promise<any>;
declare type Close = () => Promise<any>;
export interface HolochainClient {
    connect: (paramUrl?: string) => Promise<{
        call: Call;
        callZome: CallZome;
        close: Close;
        ws: any;
    }>;
}
export declare type WebsocketClient = any;
export declare type Keypair = any;
export declare type PreCallFunction = (callString: string, params: any) => Promise<{
    callString: string;
    params: any;
}>;
export declare type PostCallFunction = (response: string) => string;
export declare type PostConnectFunction = (ws: WebsocketClient) => Promise<WebsocketClient>;
export {};
